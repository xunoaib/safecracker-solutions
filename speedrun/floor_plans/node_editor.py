# Mostly generated by ChatGPT

import json
import os
import sys

import pygame

# --- Configuration ---
NODE_RADIUS = 20
NODE_COLOR = (0, 0, 255)
SELECTED_COLOR = (255, 0, 0)
# LINE_COLOR = (0, 255, 0)
LINE_COLOR = NODE_COLOR
FONT_SIZE = 20

# --- Load Image ---
if len(sys.argv) != 2:
    print("Usage: python node_editor.py <image_path>")
    sys.exit(1)

IMAGE_PATH = sys.argv[1]
assert os.path.exists(IMAGE_PATH), f"Image file '{IMAGE_PATH}' not found."
CONFIG_PATH = os.path.splitext(IMAGE_PATH)[0] + '.json'

pygame.init()
image = pygame.image.load(IMAGE_PATH)
image_rect = image.get_rect()
screen = pygame.display.set_mode((image_rect.width, image_rect.height))
pygame.display.set_caption("Node Editor")
font = pygame.font.SysFont(None, FONT_SIZE)

# --- State ---
nodes = []  # List of dicts: {"x": int, "y": int}
links = []  # List of (i, j)
selected = []  # Indexes of selected nodes

# --- Load existing config if present ---
if os.path.exists(CONFIG_PATH):
    with open(CONFIG_PATH, 'r') as f:
        data = json.load(f)
        nodes = data.get('nodes', [])
        links = [tuple(link) for link in data.get('links', [])]

# --- Functions ---


def save_config():
    with open(CONFIG_PATH, 'w') as f:
        json.dump({"nodes": nodes, "links": links}, f, indent=2)
    print(f"Configuration saved to {CONFIG_PATH}")


def get_node_at_pos(pos):
    for i, node in enumerate(nodes):
        dx = node['x'] - pos[0]
        dy = node['y'] - pos[1]
        if dx * dx + dy * dy <= NODE_RADIUS * NODE_RADIUS:
            return i
    return None


# --- Main Loop ---
running = True
while running:
    screen.blit(image, (0, 0))

    # Draw links
    for i, j in links:
        pygame.draw.line(
            screen, LINE_COLOR, (nodes[i]['x'], nodes[i]['y']),
            (nodes[j]['x'], nodes[j]['y']), 5
        )

    # Draw nodes
    for idx, node in enumerate(nodes):
        color = SELECTED_COLOR if idx in selected else NODE_COLOR
        pygame.draw.circle(screen, color, (node['x'], node['y']), NODE_RADIUS)
        label = font.render(str(idx), True, (0, 0, 0))
        screen.blit(label, (node['x'] + NODE_RADIUS, node['y'] - NODE_RADIUS))

    pygame.display.flip()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        elif event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:  # Left click
                pos = event.pos
                idx = get_node_at_pos(pos)
                if idx is not None:
                    if idx in selected:
                        selected.remove(idx)
                    else:
                        selected.append(idx)
                        if len(selected) == 2:
                            a, b = selected
                            if a != b and (a, b) not in links and (
                                b, a
                            ) not in links:
                                links.append((a, b))
                            selected.clear()
                else:
                    nodes.append({"x": pos[0], "y": pos[1]})

        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_s:
                save_config()
            elif event.key == pygame.K_q:
                pygame.quit()
                exit()

pygame.quit()
